/***************************************************		/***************************************************
*		版权声明					*		版权声明
*								*
*	本操作系统名为：MINE					*	本操作系统名为：MINE
*	该操作系统未经授权不得以盈利或非盈利为目的进行开发，	*	该操作系统未经授权不得以盈利或非盈利为目的进行开发，
*	只允许个人学习以及公开交流使用				*	只允许个人学习以及公开交流使用
*								*
*	代码最终所有权及解释权归田宇所有；			*	代码最终所有权及解释权归田宇所有；
*								*
*	本模块作者：	田宇					*	本模块作者：	田宇
*	EMail:		345538255@qq.com			*	EMail:		345538255@qq.com
*								*
*								*
***************************************************/		***************************************************/

#include "linkage.h"						#include "linkage.h"

.section .text							.section .text

ENTRY(_start)							ENTRY(_start)

	mov	$0x10,	%ax						mov	$0x10,	%ax
	mov	%ax,	%ds						mov	%ax,	%ds
	mov	%ax,	%es						mov	%ax,	%es
	mov	%ax,	%fs						mov	%ax,	%fs
	mov	%ax,	%ss						mov	%ax,	%ss
	mov	$0x7E00,	%esp					mov	$0x7E00,	%esp

//=======	load GDTR					//=======	load GDTR

	lgdt	GDT_POINTER(%rip)					lgdt	GDT_POINTER(%rip)

//=======	load	IDTR					//=======	load	IDTR

	lidt	IDT_POINTER(%rip)					lidt	IDT_POINTER(%rip)

	mov	$0x10,	%ax						mov	$0x10,	%ax
	mov	%ax,	%ds						mov	%ax,	%ds
	mov	%ax,	%es						mov	%ax,	%es
	mov	%ax,	%fs						mov	%ax,	%fs
	mov	%ax,	%gs						mov	%ax,	%gs
	mov	%ax,	%ss						mov	%ax,	%ss

	movq	$0x7E00,	%rsp					movq	$0x7E00,	%rsp

//=======	load	cr3					//=======	load	cr3

	movq	$0x101000,	%rax					movq	$0x101000,	%rax
	movq	%rax,		%cr3					movq	%rax,		%cr3
	movq	switch_seg(%rip),	%rax				movq	switch_seg(%rip),	%rax
	pushq	$0x08							pushq	$0x08
	pushq	%rax							pushq	%rax
	lretq								lretq

//=======	64-bit mode code				//=======	64-bit mode code

switch_seg:							switch_seg:
	.quad	entry64							.quad	entry64

entry64:							entry64:
	movq	$0x10,	%rax						movq	$0x10,	%rax
	movq	%rax,	%ds						movq	%rax,	%ds
	movq	%rax,	%es						movq	%rax,	%es
	movq	%rax,	%gs						movq	%rax,	%gs
	movq	%rax,	%ss						movq	%rax,	%ss
	movq	_stack_start(%rip),	%rsp		/* rs		movq	_stack_start(%rip),	%rsp		/* rs

setup_IDT:							setup_IDT:						
	leaq	ignore_int(%rip),	%rdx				leaq	ignore_int(%rip),	%rdx
	movq	$(0x08 << 16),	%rax					movq	$(0x08 << 16),	%rax
	movw	%dx,	%ax						movw	%dx,	%ax
	movq	$(0x8E00 << 32),	%rcx				movq	$(0x8E00 << 32),	%rcx		
	addq	%rcx,	%rax						addq	%rcx,	%rax
	movl	%edx,	%ecx						movl	%edx,	%ecx
	shrl	$16,	%ecx						shrl	$16,	%ecx
	shlq	$48,	%rcx						shlq	$48,	%rcx
	addq	%rcx,	%rax						addq	%rcx,	%rax
	shrq	$32,	%rdx						shrq	$32,	%rdx
	leaq	IDT_Table(%rip),	%rdi				leaq	IDT_Table(%rip),	%rdi
	mov	$256,	%rcx						mov	$256,	%rcx
rp_sidt:							rp_sidt:
	movq	%rax,	(%rdi)						movq	%rax,	(%rdi)
	movq	%rdx,	8(%rdi)						movq	%rdx,	8(%rdi)
	addq	$0x10,	%rdi						addq	$0x10,	%rdi
	dec	%rcx							dec	%rcx
	jne	rp_sidt							jne	rp_sidt

setup_TSS64:							setup_TSS64:
	leaq	TSS64_Table(%rip),	%rdx				leaq	TSS64_Table(%rip),	%rdx
	xorq	%rax,	%rax						xorq	%rax,	%rax
	xorq	%rcx,	%rcx						xorq	%rcx,	%rcx
	movq	$0x89,	%rax						movq	$0x89,	%rax
	shlq	$40,	%rax						shlq	$40,	%rax
	movl	%edx,	%ecx						movl	%edx,	%ecx
	shrl	$24,	%ecx						shrl	$24,	%ecx
	shlq	$56,	%rcx						shlq	$56,	%rcx
	addq	%rcx,	%rax						addq	%rcx,	%rax
	xorq	%rcx,	%rcx						xorq	%rcx,	%rcx
	movl	%edx,	%ecx						movl	%edx,	%ecx
	andl	$0xffffff,	%ecx					andl	$0xffffff,	%ecx
	shlq	$16,	%rcx						shlq	$16,	%rcx
	addq	%rcx,	%rax						addq	%rcx,	%rax
	addq	$103,	%rax						addq	$103,	%rax
	leaq	GDT_Table(%rip),	%rdi				leaq	GDT_Table(%rip),	%rdi
	movq	%rax,	80(%rdi)	//tss segment offset		movq	%rax,	80(%rdi)	//tss segment offset
	shrq	$32,	%rdx						shrq	$32,	%rdx
	movq	%rdx,	88(%rdi)	//tss+1 segment offse		movq	%rdx,	88(%rdi)	//tss+1 segment offse

//	mov	$0x50,	%ax					//	mov	$0x50,	%ax
//	ltr	%ax						//	ltr	%ax

	movq	go_to_kernel(%rip),	%rax		/* mo		movq	go_to_kernel(%rip),	%rax		/* mo
	pushq	$0x08							pushq	$0x08
	pushq	%rax							pushq	%rax
	lretq								lretq

go_to_kernel:							go_to_kernel:
	.quad	Start_Kernel						.quad	Start_Kernel


//=======	ignore_int					//=======	ignore_int

ignore_int:							ignore_int:
	cld								cld
	pushq	%rax							pushq	%rax
	pushq	%rbx							pushq	%rbx
	pushq	%rcx							pushq	%rcx
	pushq	%rdx							pushq	%rdx
	pushq	%rbp							pushq	%rbp
	pushq	%rdi							pushq	%rdi
	pushq	%rsi							pushq	%rsi

	pushq	%r8							pushq	%r8
	pushq	%r9							pushq	%r9
	pushq	%r10							pushq	%r10
	pushq	%r11							pushq	%r11
	pushq	%r12							pushq	%r12
	pushq	%r13							pushq	%r13
	pushq	%r14							pushq	%r14
	pushq	%r15							pushq	%r15

	movq	%es,	%rax						movq	%es,	%rax
	pushq	%rax							pushq	%rax
	movq	%ds,	%rax						movq	%ds,	%rax
	pushq	%rax							pushq	%rax

	movq	$0x10,	%rax						movq	$0x10,	%rax
	movq	%rax,	%ds						movq	%rax,	%ds
	movq	%rax,	%es						movq	%rax,	%es

	leaq	int_msg(%rip),	%rax			/* le		leaq	int_msg(%rip),	%rax			/* le
	pushq	%rax							pushq	%rax
	movq	%rax,	%rdx						movq	%rax,	%rdx
	movq	$0x00000000,	%rsi					movq	$0x00000000,	%rsi
	movq	$0x00ff0000,	%rdi					movq	$0x00ff0000,	%rdi
	movq	$0,	%rax						movq	$0,	%rax
	callq	color_printk						callq	color_printk
	addq	$0x8,	%rsp						addq	$0x8,	%rsp

Loop:								Loop:
	jmp	Loop							jmp	Loop	

	popq	%rax							popq	%rax
	movq	%rax,	%ds						movq	%rax,	%ds
	popq	%rax							popq	%rax
	movq	%rax,	%es						movq	%rax,	%es

	popq	%r15							popq	%r15
	popq	%r14							popq	%r14
	popq	%r13							popq	%r13
	popq	%r12							popq	%r12
	popq	%r11							popq	%r11
	popq	%r10							popq	%r10
	popq	%r9							popq	%r9
	popq	%r8							popq	%r8

	popq	%rsi							popq	%rsi
	popq	%rdi							popq	%rdi
	popq	%rbp							popq	%rbp
	popq	%rdx							popq	%rdx
	popq	%rcx							popq	%rcx
	popq	%rbx							popq	%rbx
	popq	%rax							popq	%rax
	iretq								iretq

int_msg:							int_msg:
	.asciz "Unknown interrupt or fault at RIP\n"			.asciz "Unknown interrupt or fault at RIP\n"

ENTRY(_stack_start)						ENTRY(_stack_start)
	.quad	init_task_union + 32768					.quad	init_task_union + 32768



//=======	init page					//=======	init page
.align 8							.align 8

.org	0x1000							.org	0x1000

__PML4E:							__PML4E:

	.quad	0x102003				      |		.quad	0x102007
	.fill	255,8,0							.fill	255,8,0
	.quad	0x102003				      |		.quad	0x102007
	.fill	255,8,0							.fill	255,8,0

.org	0x2000							.org	0x2000

__PDPTE:							__PDPTE:
									
	.quad	0x103003	/* 0x103003 */		      |		.quad	0x103007	/* 0x103003 */
	.fill	511,8,0							.fill	511,8,0

.org	0x3000							.org	0x3000

__PDE:								__PDE:

	.quad	0x000083				      |		.quad	0x000087	
	.quad	0x200083				      |		.quad	0x200087
	.quad	0x400083				      |		.quad	0x400087
	.quad	0x600083				      |		.quad	0x600087
	.quad	0x800083		/* 0x800083 */	      |		.quad	0x800087		/* 0x800083 */
	.quad	0xa00083				      |		.quad	0xe0000087		/*0x a00000*/
	.quad	0xc00083				      |		.quad	0xe0200087
	.quad	0xe00083				      |		.quad	0xe0400087
	.quad	0x1000083				      |		.quad	0xe0600087		/*0x1000000*/
	.quad	0x1200083				      |		.quad	0xe0800087
	.quad	0x1400083				      |		.quad	0xe0a00087
	.quad	0x1600083				      |		.quad	0xe0c00087
	.quad	0x1800083				      |		.quad	0xe0e00087
	.quad	0x1a00083				      |		.fill	499,8,0
	.quad	0x1c00083				      <
	.quad	0x1e00083				      <
	.quad	0x2000083				      <
	.quad	0x2200083				      <
	.quad	0x2400083				      <
	.quad	0x2600083				      <
	.quad	0x2800083				      <
	.quad	0x2a00083				      <
	.quad	0x2c00083				      <
	.quad	0x2e00083				      <
							      <
							      <
							      <
	.quad	0xe0000083		/*0x 3000000*/	      <
	.quad	0xe0200083				      <
	.quad	0xe0400083				      <
	.quad	0xe0600083				      <
	.quad	0xe0800083				      <
	.quad	0xe0a00083				      <
	.quad	0xe0c00083				      <
	.quad	0xe0e00083				      <
	.fill	480,8,0					      <

//=======	GDT_Table					//=======	GDT_Table

.section .data							.section .data

.globl GDT_Table						.globl GDT_Table

GDT_Table:							GDT_Table:
	.quad	0x0000000000000000			/*0		.quad	0x0000000000000000			/*0
	.quad	0x0020980000000000			/*1		.quad	0x0020980000000000			/*1
	.quad	0x0000920000000000			/*2		.quad	0x0000920000000000			/*2
	.quad	0x0000000000000000			/*3		.quad	0x0000000000000000			/*3
	.quad	0x0000000000000000			/*4		.quad	0x0000000000000000			/*4
	.quad	0x0020f80000000000			/*5		.quad	0x0020f80000000000			/*5
	.quad	0x0000f20000000000			/*6		.quad	0x0000f20000000000			/*6
	.quad	0x00cf9a000000ffff			/*7		.quad	0x00cf9a000000ffff			/*7
	.quad	0x00cf92000000ffff			/*8		.quad	0x00cf92000000ffff			/*8
	.fill	10,8,0					/*10 		.fill	10,8,0					/*10 
GDT_END:							GDT_END:

GDT_POINTER:							GDT_POINTER:
GDT_LIMIT:	.word	GDT_END - GDT_Table - 1			GDT_LIMIT:	.word	GDT_END - GDT_Table - 1
GDT_BASE:	.quad	GDT_Table				GDT_BASE:	.quad	GDT_Table

//=======	IDT_Table					//=======	IDT_Table

.globl IDT_Table						.globl IDT_Table

IDT_Table:							IDT_Table:
	.fill  512,8,0							.fill  512,8,0
IDT_END:							IDT_END:

IDT_POINTER:							IDT_POINTER:
IDT_LIMIT:	.word	IDT_END - IDT_Table - 1			IDT_LIMIT:	.word	IDT_END - IDT_Table - 1
IDT_BASE:	.quad	IDT_Table				IDT_BASE:	.quad	IDT_Table

//=======	TSS64_Table					//=======	TSS64_Table

.globl	TSS64_Table						.globl	TSS64_Table

TSS64_Table:							TSS64_Table:
	.fill  13,8,0							.fill  13,8,0
TSS64_END:							TSS64_END:


TSS64_POINTER:							TSS64_POINTER:
TSS64_LIMIT:	.word	TSS64_END - TSS64_Table - 1		TSS64_LIMIT:	.word	TSS64_END - TSS64_Table - 1
TSS64_BASE:	.quad	TSS64_Table				TSS64_BASE:	.quad	TSS64_Table

